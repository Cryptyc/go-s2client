// Code generated by protoc-gen-go. DO NOT EDIT.
// source: s2clientprotocol/spatial.proto

package SC2APIProtocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ActionSpatialUnitSelectionPoint_Type int32

const (
	ActionSpatialUnitSelectionPoint_Select     ActionSpatialUnitSelectionPoint_Type = 1
	ActionSpatialUnitSelectionPoint_Toggle     ActionSpatialUnitSelectionPoint_Type = 2
	ActionSpatialUnitSelectionPoint_AllType    ActionSpatialUnitSelectionPoint_Type = 3
	ActionSpatialUnitSelectionPoint_AddAllType ActionSpatialUnitSelectionPoint_Type = 4
)

var ActionSpatialUnitSelectionPoint_Type_name = map[int32]string{
	1: "Select",
	2: "Toggle",
	3: "AllType",
	4: "AddAllType",
}
var ActionSpatialUnitSelectionPoint_Type_value = map[string]int32{
	"Select":     1,
	"Toggle":     2,
	"AllType":    3,
	"AddAllType": 4,
}

func (x ActionSpatialUnitSelectionPoint_Type) Enum() *ActionSpatialUnitSelectionPoint_Type {
	p := new(ActionSpatialUnitSelectionPoint_Type)
	*p = x
	return p
}
func (x ActionSpatialUnitSelectionPoint_Type) String() string {
	return proto.EnumName(ActionSpatialUnitSelectionPoint_Type_name, int32(x))
}
func (x *ActionSpatialUnitSelectionPoint_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActionSpatialUnitSelectionPoint_Type_value, data, "ActionSpatialUnitSelectionPoint_Type")
	if err != nil {
		return err
	}
	*x = ActionSpatialUnitSelectionPoint_Type(value)
	return nil
}
func (ActionSpatialUnitSelectionPoint_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor8, []int{7, 0}
}

type ObservationFeatureLayer struct {
	Renders          *FeatureLayers        `protobuf:"bytes,1,opt,name=renders" json:"renders,omitempty"`
	MinimapRenders   *FeatureLayersMinimap `protobuf:"bytes,2,opt,name=minimap_renders,json=minimapRenders" json:"minimap_renders,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *ObservationFeatureLayer) Reset()                    { *m = ObservationFeatureLayer{} }
func (m *ObservationFeatureLayer) String() string            { return proto.CompactTextString(m) }
func (*ObservationFeatureLayer) ProtoMessage()               {}
func (*ObservationFeatureLayer) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *ObservationFeatureLayer) GetRenders() *FeatureLayers {
	if m != nil {
		return m.Renders
	}
	return nil
}

func (m *ObservationFeatureLayer) GetMinimapRenders() *FeatureLayersMinimap {
	if m != nil {
		return m.MinimapRenders
	}
	return nil
}

type FeatureLayers struct {
	HeightMap          *ImageData `protobuf:"bytes,1,opt,name=height_map,json=heightMap" json:"height_map,omitempty"`
	VisibilityMap      *ImageData `protobuf:"bytes,2,opt,name=visibility_map,json=visibilityMap" json:"visibility_map,omitempty"`
	Creep              *ImageData `protobuf:"bytes,3,opt,name=creep" json:"creep,omitempty"`
	Power              *ImageData `protobuf:"bytes,4,opt,name=power" json:"power,omitempty"`
	PlayerId           *ImageData `protobuf:"bytes,5,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	UnitType           *ImageData `protobuf:"bytes,6,opt,name=unit_type,json=unitType" json:"unit_type,omitempty"`
	Selected           *ImageData `protobuf:"bytes,7,opt,name=selected" json:"selected,omitempty"`
	UnitHitPoints      *ImageData `protobuf:"bytes,8,opt,name=unit_hit_points,json=unitHitPoints" json:"unit_hit_points,omitempty"`
	UnitHitPointsRatio *ImageData `protobuf:"bytes,17,opt,name=unit_hit_points_ratio,json=unitHitPointsRatio" json:"unit_hit_points_ratio,omitempty"`
	UnitEnergy         *ImageData `protobuf:"bytes,9,opt,name=unit_energy,json=unitEnergy" json:"unit_energy,omitempty"`
	UnitShields        *ImageData `protobuf:"bytes,10,opt,name=unit_shields,json=unitShields" json:"unit_shields,omitempty"`
	PlayerRelative     *ImageData `protobuf:"bytes,11,opt,name=player_relative,json=playerRelative" json:"player_relative,omitempty"`
	UnitDensityAa      *ImageData `protobuf:"bytes,14,opt,name=unit_density_aa,json=unitDensityAa" json:"unit_density_aa,omitempty"`
	UnitDensity        *ImageData `protobuf:"bytes,15,opt,name=unit_density,json=unitDensity" json:"unit_density,omitempty"`
	XXX_unrecognized   []byte     `json:"-"`
}

func (m *FeatureLayers) Reset()                    { *m = FeatureLayers{} }
func (m *FeatureLayers) String() string            { return proto.CompactTextString(m) }
func (*FeatureLayers) ProtoMessage()               {}
func (*FeatureLayers) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *FeatureLayers) GetHeightMap() *ImageData {
	if m != nil {
		return m.HeightMap
	}
	return nil
}

func (m *FeatureLayers) GetVisibilityMap() *ImageData {
	if m != nil {
		return m.VisibilityMap
	}
	return nil
}

func (m *FeatureLayers) GetCreep() *ImageData {
	if m != nil {
		return m.Creep
	}
	return nil
}

func (m *FeatureLayers) GetPower() *ImageData {
	if m != nil {
		return m.Power
	}
	return nil
}

func (m *FeatureLayers) GetPlayerId() *ImageData {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

func (m *FeatureLayers) GetUnitType() *ImageData {
	if m != nil {
		return m.UnitType
	}
	return nil
}

func (m *FeatureLayers) GetSelected() *ImageData {
	if m != nil {
		return m.Selected
	}
	return nil
}

func (m *FeatureLayers) GetUnitHitPoints() *ImageData {
	if m != nil {
		return m.UnitHitPoints
	}
	return nil
}

func (m *FeatureLayers) GetUnitHitPointsRatio() *ImageData {
	if m != nil {
		return m.UnitHitPointsRatio
	}
	return nil
}

func (m *FeatureLayers) GetUnitEnergy() *ImageData {
	if m != nil {
		return m.UnitEnergy
	}
	return nil
}

func (m *FeatureLayers) GetUnitShields() *ImageData {
	if m != nil {
		return m.UnitShields
	}
	return nil
}

func (m *FeatureLayers) GetPlayerRelative() *ImageData {
	if m != nil {
		return m.PlayerRelative
	}
	return nil
}

func (m *FeatureLayers) GetUnitDensityAa() *ImageData {
	if m != nil {
		return m.UnitDensityAa
	}
	return nil
}

func (m *FeatureLayers) GetUnitDensity() *ImageData {
	if m != nil {
		return m.UnitDensity
	}
	return nil
}

type FeatureLayersMinimap struct {
	HeightMap      *ImageData `protobuf:"bytes,1,opt,name=height_map,json=heightMap" json:"height_map,omitempty"`
	VisibilityMap  *ImageData `protobuf:"bytes,2,opt,name=visibility_map,json=visibilityMap" json:"visibility_map,omitempty"`
	Creep          *ImageData `protobuf:"bytes,3,opt,name=creep" json:"creep,omitempty"`
	Camera         *ImageData `protobuf:"bytes,4,opt,name=camera" json:"camera,omitempty"`
	PlayerId       *ImageData `protobuf:"bytes,5,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	PlayerRelative *ImageData `protobuf:"bytes,6,opt,name=player_relative,json=playerRelative" json:"player_relative,omitempty"`
	Selected       *ImageData `protobuf:"bytes,7,opt,name=selected" json:"selected,omitempty"`
	// Cheat layers. Only populated in replays.
	UnitType         *ImageData `protobuf:"bytes,8,opt,name=unit_type,json=unitType" json:"unit_type,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *FeatureLayersMinimap) Reset()                    { *m = FeatureLayersMinimap{} }
func (m *FeatureLayersMinimap) String() string            { return proto.CompactTextString(m) }
func (*FeatureLayersMinimap) ProtoMessage()               {}
func (*FeatureLayersMinimap) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *FeatureLayersMinimap) GetHeightMap() *ImageData {
	if m != nil {
		return m.HeightMap
	}
	return nil
}

func (m *FeatureLayersMinimap) GetVisibilityMap() *ImageData {
	if m != nil {
		return m.VisibilityMap
	}
	return nil
}

func (m *FeatureLayersMinimap) GetCreep() *ImageData {
	if m != nil {
		return m.Creep
	}
	return nil
}

func (m *FeatureLayersMinimap) GetCamera() *ImageData {
	if m != nil {
		return m.Camera
	}
	return nil
}

func (m *FeatureLayersMinimap) GetPlayerId() *ImageData {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

func (m *FeatureLayersMinimap) GetPlayerRelative() *ImageData {
	if m != nil {
		return m.PlayerRelative
	}
	return nil
}

func (m *FeatureLayersMinimap) GetSelected() *ImageData {
	if m != nil {
		return m.Selected
	}
	return nil
}

func (m *FeatureLayersMinimap) GetUnitType() *ImageData {
	if m != nil {
		return m.UnitType
	}
	return nil
}

type ObservationRender struct {
	Map              *ImageData `protobuf:"bytes,1,opt,name=map" json:"map,omitempty"`
	Minimap          *ImageData `protobuf:"bytes,2,opt,name=minimap" json:"minimap,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ObservationRender) Reset()                    { *m = ObservationRender{} }
func (m *ObservationRender) String() string            { return proto.CompactTextString(m) }
func (*ObservationRender) ProtoMessage()               {}
func (*ObservationRender) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *ObservationRender) GetMap() *ImageData {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *ObservationRender) GetMinimap() *ImageData {
	if m != nil {
		return m.Minimap
	}
	return nil
}

type ActionSpatial struct {
	// Types that are valid to be assigned to Action:
	//	*ActionSpatial_UnitCommand
	//	*ActionSpatial_CameraMove
	//	*ActionSpatial_UnitSelectionPoint
	//	*ActionSpatial_UnitSelectionRect
	Action           isActionSpatial_Action `protobuf_oneof:"action"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *ActionSpatial) Reset()                    { *m = ActionSpatial{} }
func (m *ActionSpatial) String() string            { return proto.CompactTextString(m) }
func (*ActionSpatial) ProtoMessage()               {}
func (*ActionSpatial) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

type isActionSpatial_Action interface {
	isActionSpatial_Action()
}

type ActionSpatial_UnitCommand struct {
	UnitCommand *ActionSpatialUnitCommand `protobuf:"bytes,1,opt,name=unit_command,json=unitCommand,oneof"`
}
type ActionSpatial_CameraMove struct {
	CameraMove *ActionSpatialCameraMove `protobuf:"bytes,2,opt,name=camera_move,json=cameraMove,oneof"`
}
type ActionSpatial_UnitSelectionPoint struct {
	UnitSelectionPoint *ActionSpatialUnitSelectionPoint `protobuf:"bytes,3,opt,name=unit_selection_point,json=unitSelectionPoint,oneof"`
}
type ActionSpatial_UnitSelectionRect struct {
	UnitSelectionRect *ActionSpatialUnitSelectionRect `protobuf:"bytes,4,opt,name=unit_selection_rect,json=unitSelectionRect,oneof"`
}

func (*ActionSpatial_UnitCommand) isActionSpatial_Action()        {}
func (*ActionSpatial_CameraMove) isActionSpatial_Action()         {}
func (*ActionSpatial_UnitSelectionPoint) isActionSpatial_Action() {}
func (*ActionSpatial_UnitSelectionRect) isActionSpatial_Action()  {}

func (m *ActionSpatial) GetAction() isActionSpatial_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ActionSpatial) GetUnitCommand() *ActionSpatialUnitCommand {
	if x, ok := m.GetAction().(*ActionSpatial_UnitCommand); ok {
		return x.UnitCommand
	}
	return nil
}

func (m *ActionSpatial) GetCameraMove() *ActionSpatialCameraMove {
	if x, ok := m.GetAction().(*ActionSpatial_CameraMove); ok {
		return x.CameraMove
	}
	return nil
}

func (m *ActionSpatial) GetUnitSelectionPoint() *ActionSpatialUnitSelectionPoint {
	if x, ok := m.GetAction().(*ActionSpatial_UnitSelectionPoint); ok {
		return x.UnitSelectionPoint
	}
	return nil
}

func (m *ActionSpatial) GetUnitSelectionRect() *ActionSpatialUnitSelectionRect {
	if x, ok := m.GetAction().(*ActionSpatial_UnitSelectionRect); ok {
		return x.UnitSelectionRect
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActionSpatial) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActionSpatial_OneofMarshaler, _ActionSpatial_OneofUnmarshaler, _ActionSpatial_OneofSizer, []interface{}{
		(*ActionSpatial_UnitCommand)(nil),
		(*ActionSpatial_CameraMove)(nil),
		(*ActionSpatial_UnitSelectionPoint)(nil),
		(*ActionSpatial_UnitSelectionRect)(nil),
	}
}

func _ActionSpatial_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActionSpatial)
	// action
	switch x := m.Action.(type) {
	case *ActionSpatial_UnitCommand:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnitCommand); err != nil {
			return err
		}
	case *ActionSpatial_CameraMove:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CameraMove); err != nil {
			return err
		}
	case *ActionSpatial_UnitSelectionPoint:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnitSelectionPoint); err != nil {
			return err
		}
	case *ActionSpatial_UnitSelectionRect:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnitSelectionRect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ActionSpatial.Action has unexpected type %T", x)
	}
	return nil
}

func _ActionSpatial_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActionSpatial)
	switch tag {
	case 1: // action.unit_command
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSpatialUnitCommand)
		err := b.DecodeMessage(msg)
		m.Action = &ActionSpatial_UnitCommand{msg}
		return true, err
	case 2: // action.camera_move
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSpatialCameraMove)
		err := b.DecodeMessage(msg)
		m.Action = &ActionSpatial_CameraMove{msg}
		return true, err
	case 3: // action.unit_selection_point
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSpatialUnitSelectionPoint)
		err := b.DecodeMessage(msg)
		m.Action = &ActionSpatial_UnitSelectionPoint{msg}
		return true, err
	case 4: // action.unit_selection_rect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSpatialUnitSelectionRect)
		err := b.DecodeMessage(msg)
		m.Action = &ActionSpatial_UnitSelectionRect{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ActionSpatial_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActionSpatial)
	// action
	switch x := m.Action.(type) {
	case *ActionSpatial_UnitCommand:
		s := proto.Size(x.UnitCommand)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionSpatial_CameraMove:
		s := proto.Size(x.CameraMove)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionSpatial_UnitSelectionPoint:
		s := proto.Size(x.UnitSelectionPoint)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionSpatial_UnitSelectionRect:
		s := proto.Size(x.UnitSelectionRect)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ActionSpatialUnitCommand struct {
	AbilityId *int32 `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	// Types that are valid to be assigned to Target:
	//	*ActionSpatialUnitCommand_TargetScreenCoord
	//	*ActionSpatialUnitCommand_TargetMinimapCoord
	Target           isActionSpatialUnitCommand_Target `protobuf_oneof:"target"`
	QueueCommand     *bool                             `protobuf:"varint,4,opt,name=queue_command,json=queueCommand" json:"queue_command,omitempty"`
	XXX_unrecognized []byte                            `json:"-"`
}

func (m *ActionSpatialUnitCommand) Reset()                    { *m = ActionSpatialUnitCommand{} }
func (m *ActionSpatialUnitCommand) String() string            { return proto.CompactTextString(m) }
func (*ActionSpatialUnitCommand) ProtoMessage()               {}
func (*ActionSpatialUnitCommand) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

type isActionSpatialUnitCommand_Target interface {
	isActionSpatialUnitCommand_Target()
}

type ActionSpatialUnitCommand_TargetScreenCoord struct {
	TargetScreenCoord *PointI `protobuf:"bytes,2,opt,name=target_screen_coord,json=targetScreenCoord,oneof"`
}
type ActionSpatialUnitCommand_TargetMinimapCoord struct {
	TargetMinimapCoord *PointI `protobuf:"bytes,3,opt,name=target_minimap_coord,json=targetMinimapCoord,oneof"`
}

func (*ActionSpatialUnitCommand_TargetScreenCoord) isActionSpatialUnitCommand_Target()  {}
func (*ActionSpatialUnitCommand_TargetMinimapCoord) isActionSpatialUnitCommand_Target() {}

func (m *ActionSpatialUnitCommand) GetTarget() isActionSpatialUnitCommand_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ActionSpatialUnitCommand) GetAbilityId() int32 {
	if m != nil && m.AbilityId != nil {
		return *m.AbilityId
	}
	return 0
}

func (m *ActionSpatialUnitCommand) GetTargetScreenCoord() *PointI {
	if x, ok := m.GetTarget().(*ActionSpatialUnitCommand_TargetScreenCoord); ok {
		return x.TargetScreenCoord
	}
	return nil
}

func (m *ActionSpatialUnitCommand) GetTargetMinimapCoord() *PointI {
	if x, ok := m.GetTarget().(*ActionSpatialUnitCommand_TargetMinimapCoord); ok {
		return x.TargetMinimapCoord
	}
	return nil
}

func (m *ActionSpatialUnitCommand) GetQueueCommand() bool {
	if m != nil && m.QueueCommand != nil {
		return *m.QueueCommand
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActionSpatialUnitCommand) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActionSpatialUnitCommand_OneofMarshaler, _ActionSpatialUnitCommand_OneofUnmarshaler, _ActionSpatialUnitCommand_OneofSizer, []interface{}{
		(*ActionSpatialUnitCommand_TargetScreenCoord)(nil),
		(*ActionSpatialUnitCommand_TargetMinimapCoord)(nil),
	}
}

func _ActionSpatialUnitCommand_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActionSpatialUnitCommand)
	// target
	switch x := m.Target.(type) {
	case *ActionSpatialUnitCommand_TargetScreenCoord:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TargetScreenCoord); err != nil {
			return err
		}
	case *ActionSpatialUnitCommand_TargetMinimapCoord:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TargetMinimapCoord); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ActionSpatialUnitCommand.Target has unexpected type %T", x)
	}
	return nil
}

func _ActionSpatialUnitCommand_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActionSpatialUnitCommand)
	switch tag {
	case 2: // target.target_screen_coord
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PointI)
		err := b.DecodeMessage(msg)
		m.Target = &ActionSpatialUnitCommand_TargetScreenCoord{msg}
		return true, err
	case 3: // target.target_minimap_coord
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PointI)
		err := b.DecodeMessage(msg)
		m.Target = &ActionSpatialUnitCommand_TargetMinimapCoord{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ActionSpatialUnitCommand_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActionSpatialUnitCommand)
	// target
	switch x := m.Target.(type) {
	case *ActionSpatialUnitCommand_TargetScreenCoord:
		s := proto.Size(x.TargetScreenCoord)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionSpatialUnitCommand_TargetMinimapCoord:
		s := proto.Size(x.TargetMinimapCoord)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ActionSpatialCameraMove struct {
	CenterMinimap    *PointI `protobuf:"bytes,1,opt,name=center_minimap,json=centerMinimap" json:"center_minimap,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ActionSpatialCameraMove) Reset()                    { *m = ActionSpatialCameraMove{} }
func (m *ActionSpatialCameraMove) String() string            { return proto.CompactTextString(m) }
func (*ActionSpatialCameraMove) ProtoMessage()               {}
func (*ActionSpatialCameraMove) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *ActionSpatialCameraMove) GetCenterMinimap() *PointI {
	if m != nil {
		return m.CenterMinimap
	}
	return nil
}

type ActionSpatialUnitSelectionPoint struct {
	SelectionScreenCoord *PointI                               `protobuf:"bytes,1,opt,name=selection_screen_coord,json=selectionScreenCoord" json:"selection_screen_coord,omitempty"`
	Type                 *ActionSpatialUnitSelectionPoint_Type `protobuf:"varint,2,opt,name=type,enum=SC2APIProtocol.ActionSpatialUnitSelectionPoint_Type" json:"type,omitempty"`
	XXX_unrecognized     []byte                                `json:"-"`
}

func (m *ActionSpatialUnitSelectionPoint) Reset()                    { *m = ActionSpatialUnitSelectionPoint{} }
func (m *ActionSpatialUnitSelectionPoint) String() string            { return proto.CompactTextString(m) }
func (*ActionSpatialUnitSelectionPoint) ProtoMessage()               {}
func (*ActionSpatialUnitSelectionPoint) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *ActionSpatialUnitSelectionPoint) GetSelectionScreenCoord() *PointI {
	if m != nil {
		return m.SelectionScreenCoord
	}
	return nil
}

func (m *ActionSpatialUnitSelectionPoint) GetType() ActionSpatialUnitSelectionPoint_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ActionSpatialUnitSelectionPoint_Select
}

type ActionSpatialUnitSelectionRect struct {
	SelectionScreenCoord []*RectangleI `protobuf:"bytes,1,rep,name=selection_screen_coord,json=selectionScreenCoord" json:"selection_screen_coord,omitempty"`
	SelectionAdd         *bool         `protobuf:"varint,2,opt,name=selection_add,json=selectionAdd" json:"selection_add,omitempty"`
	XXX_unrecognized     []byte        `json:"-"`
}

func (m *ActionSpatialUnitSelectionRect) Reset()                    { *m = ActionSpatialUnitSelectionRect{} }
func (m *ActionSpatialUnitSelectionRect) String() string            { return proto.CompactTextString(m) }
func (*ActionSpatialUnitSelectionRect) ProtoMessage()               {}
func (*ActionSpatialUnitSelectionRect) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *ActionSpatialUnitSelectionRect) GetSelectionScreenCoord() []*RectangleI {
	if m != nil {
		return m.SelectionScreenCoord
	}
	return nil
}

func (m *ActionSpatialUnitSelectionRect) GetSelectionAdd() bool {
	if m != nil && m.SelectionAdd != nil {
		return *m.SelectionAdd
	}
	return false
}

func init() {
	proto.RegisterType((*ObservationFeatureLayer)(nil), "SC2APIProtocol.ObservationFeatureLayer")
	proto.RegisterType((*FeatureLayers)(nil), "SC2APIProtocol.FeatureLayers")
	proto.RegisterType((*FeatureLayersMinimap)(nil), "SC2APIProtocol.FeatureLayersMinimap")
	proto.RegisterType((*ObservationRender)(nil), "SC2APIProtocol.ObservationRender")
	proto.RegisterType((*ActionSpatial)(nil), "SC2APIProtocol.ActionSpatial")
	proto.RegisterType((*ActionSpatialUnitCommand)(nil), "SC2APIProtocol.ActionSpatialUnitCommand")
	proto.RegisterType((*ActionSpatialCameraMove)(nil), "SC2APIProtocol.ActionSpatialCameraMove")
	proto.RegisterType((*ActionSpatialUnitSelectionPoint)(nil), "SC2APIProtocol.ActionSpatialUnitSelectionPoint")
	proto.RegisterType((*ActionSpatialUnitSelectionRect)(nil), "SC2APIProtocol.ActionSpatialUnitSelectionRect")
	proto.RegisterEnum("SC2APIProtocol.ActionSpatialUnitSelectionPoint_Type", ActionSpatialUnitSelectionPoint_Type_name, ActionSpatialUnitSelectionPoint_Type_value)
}

func init() { proto.RegisterFile("s2clientprotocol/spatial.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 863 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x96, 0xdb, 0x6e, 0x1a, 0x47,
	0x18, 0xc7, 0x8d, 0xb1, 0x31, 0xfe, 0x30, 0x8b, 0x3d, 0xa1, 0xc9, 0x36, 0x92, 0xd3, 0x6a, 0x53,
	0xa9, 0x96, 0x2a, 0x61, 0x95, 0x1e, 0xd5, 0x83, 0x54, 0x42, 0x5a, 0x41, 0x64, 0x54, 0xb4, 0xa4,
	0x52, 0xef, 0xb6, 0x93, 0xdd, 0x4f, 0x30, 0xd2, 0x9e, 0x3a, 0x3b, 0x50, 0xf1, 0x24, 0xbd, 0xee,
	0xa3, 0x55, 0xea, 0x33, 0xf4, 0xa6, 0x52, 0x55, 0xcd, 0x61, 0xb1, 0xa1, 0x81, 0x21, 0xbe, 0xcb,
	0x9d, 0x67, 0xfc, 0xff, 0xfd, 0x67, 0xe6, 0x3b, 0x2d, 0xf0, 0xa4, 0xe8, 0x86, 0x31, 0xc3, 0x54,
	0xe4, 0x3c, 0x13, 0x59, 0x98, 0xc5, 0xd7, 0x45, 0x4e, 0x05, 0xa3, 0x71, 0x47, 0x6d, 0x10, 0x67,
	0xd2, 0xef, 0xf6, 0xc6, 0xc3, 0xb1, 0xf9, 0xef, 0xe3, 0xcb, 0xff, 0xe9, 0xc3, 0x2c, 0x49, 0xb2,
	0x54, 0xcb, 0xbd, 0x3f, 0x2a, 0xf0, 0xe8, 0xc7, 0x57, 0x05, 0xf2, 0x05, 0x15, 0x2c, 0x4b, 0x7f,
	0x40, 0x2a, 0xe6, 0x1c, 0x6f, 0xe8, 0x12, 0x39, 0xf9, 0x02, 0x4e, 0x38, 0xa6, 0x11, 0xf2, 0xc2,
	0xad, 0xbc, 0x5f, 0xb9, 0x6a, 0x74, 0x2f, 0x3b, 0xeb, 0xe6, 0x9d, 0xbb, 0xf2, 0xc2, 0x2f, 0xd5,
	0x64, 0x04, 0xad, 0x84, 0xa5, 0x2c, 0xa1, 0x79, 0x50, 0x1a, 0x1c, 0x2a, 0x83, 0x0f, 0x76, 0x1a,
	0x8c, 0x34, 0xe3, 0x3b, 0x06, 0xf6, 0x35, 0xeb, 0xfd, 0x55, 0x83, 0xe6, 0x9a, 0x90, 0x7c, 0x09,
	0x30, 0x43, 0x36, 0x9d, 0x89, 0x20, 0xa1, 0xb9, 0xb9, 0xdc, 0xbb, 0x9b, 0xde, 0xc3, 0x84, 0x4e,
	0xf1, 0x39, 0x15, 0xd4, 0x3f, 0xd5, 0xe2, 0x11, 0xcd, 0xc9, 0x77, 0xe0, 0x2c, 0x58, 0xc1, 0x5e,
	0xb1, 0x98, 0x89, 0xa5, 0xa2, 0x0f, 0x6d, 0x74, 0xf3, 0x16, 0x90, 0x0e, 0xd7, 0x70, 0x1c, 0x72,
	0xc4, 0xdc, 0xad, 0xda, 0x40, 0xad, 0x93, 0x40, 0x9e, 0xfd, 0x86, 0xdc, 0x3d, 0xb2, 0x02, 0x4a,
	0x47, 0x3e, 0x87, 0xd3, 0x3c, 0x96, 0x0f, 0x0d, 0x58, 0xe4, 0x1e, 0xdb, 0xa0, 0xba, 0xd6, 0x0e,
	0x23, 0xc9, 0xcd, 0x53, 0x26, 0x02, 0xb1, 0xcc, 0xd1, 0xad, 0x59, 0x39, 0xa9, 0x7d, 0xb9, 0xcc,
	0x91, 0x7c, 0x06, 0xf5, 0x02, 0x63, 0x0c, 0x05, 0x46, 0xee, 0x89, 0x15, 0x2b, 0xa5, 0xa4, 0x07,
	0x2d, 0x75, 0xdc, 0x8c, 0x89, 0x20, 0xcf, 0x58, 0x2a, 0x0a, 0xb7, 0x6e, 0x8d, 0xa5, 0x24, 0x06,
	0x4c, 0x8c, 0x95, 0x9e, 0xdc, 0xc0, 0x3b, 0x1b, 0x16, 0x01, 0x97, 0x75, 0xe8, 0x5e, 0xd8, 0x8c,
	0xc8, 0x9a, 0x91, 0x2f, 0x21, 0xf2, 0x15, 0x34, 0x94, 0x1b, 0xa6, 0xc8, 0xa7, 0x4b, 0xf7, 0xd4,
	0xe6, 0x01, 0x52, 0xfd, 0xbd, 0x12, 0x93, 0x6f, 0xe0, 0x4c, 0xb1, 0xc5, 0x8c, 0x61, 0x1c, 0x15,
	0x2e, 0xd8, 0x60, 0x75, 0xd4, 0x44, 0xab, 0xc9, 0x33, 0x68, 0x99, 0x8c, 0x71, 0x8c, 0xa9, 0x60,
	0x0b, 0x74, 0x1b, 0x36, 0x03, 0x47, 0x13, 0xbe, 0x01, 0x56, 0xe1, 0x8c, 0x30, 0x2d, 0x64, 0x6d,
	0x52, 0xea, 0x3a, 0x7b, 0x85, 0xf3, 0xb9, 0x06, 0x7a, 0x74, 0xf5, 0x08, 0x63, 0xe1, 0xb6, 0xf6,
	0x7a, 0x84, 0xe1, 0xbd, 0x3f, 0xab, 0xd0, 0x7e, 0x5d, 0x3f, 0xbe, 0x5d, 0xdd, 0xf6, 0x31, 0xd4,
	0x42, 0x9a, 0x20, 0xa7, 0xf6, 0x76, 0x33, 0xc2, 0x7b, 0xf7, 0xdb, 0x6b, 0xb2, 0x5e, 0x7b, 0xd3,
	0xac, 0xdf, 0xb3, 0xf7, 0xd6, 0x5a, 0xbd, 0xbe, 0x77, 0xab, 0x7b, 0x73, 0xb8, 0xb8, 0x33, 0xed,
	0xf5, 0x80, 0x25, 0x1f, 0x41, 0x75, 0xaf, 0xc4, 0x4a, 0x15, 0xf9, 0x04, 0x4e, 0xcc, 0x78, 0xb6,
	0xe7, 0xb2, 0x54, 0x7a, 0xff, 0x1c, 0x42, 0xb3, 0x17, 0xca, 0x23, 0x27, 0xfa, 0x63, 0x45, 0x46,
	0xa6, 0x54, 0xe5, 0xc7, 0x88, 0xa6, 0x91, 0x39, 0xfc, 0x6a, 0xd3, 0x6b, 0x0d, 0xfa, 0x29, 0x65,
	0xa2, 0xaf, 0xf5, 0x83, 0x03, 0x5d, 0xbb, 0x66, 0x49, 0x5e, 0x40, 0x43, 0x27, 0x33, 0x48, 0xb2,
	0x05, 0x9a, 0x9b, 0x7d, 0xb8, 0xd3, 0xad, 0xaf, 0xf4, 0xa3, 0x6c, 0x81, 0x83, 0x03, 0x1f, 0xc2,
	0xd5, 0x8a, 0x84, 0xd0, 0xd6, 0xa3, 0x40, 0x05, 0x9b, 0x65, 0xa9, 0x1e, 0x4d, 0xa6, 0x02, 0xaf,
	0xad, 0x57, 0x9c, 0x94, 0x9c, 0x9a, 0x4d, 0x83, 0x03, 0x3d, 0xab, 0xd6, 0x77, 0xc9, 0x2f, 0xf0,
	0x60, 0xe3, 0x10, 0x8e, 0xa1, 0x30, 0x35, 0xdb, 0xd9, 0xff, 0x0c, 0x1f, 0x43, 0x79, 0xc4, 0xc5,
	0x7c, 0x73, 0xf3, 0x59, 0x1d, 0x6a, 0x54, 0xad, 0xbc, 0x7f, 0x2b, 0xe0, 0x6e, 0x0b, 0x24, 0xb9,
	0x04, 0xa0, 0xa6, 0x3f, 0x99, 0x4e, 0xc3, 0xb1, 0x7f, 0x6a, 0x76, 0x86, 0x11, 0x19, 0xc0, 0x03,
	0x41, 0xf9, 0x14, 0x45, 0x50, 0xc8, 0xfe, 0x4a, 0x83, 0x30, 0xcb, 0x78, 0x64, 0x02, 0xfc, 0x70,
	0xf3, 0x9e, 0xea, 0x6d, 0x43, 0x79, 0x1f, 0x0d, 0x4d, 0x14, 0xd3, 0x97, 0x08, 0x79, 0x01, 0x6d,
	0xe3, 0x54, 0xfe, 0x36, 0xd0, 0x56, 0x55, 0x8b, 0x15, 0xd1, 0x94, 0x19, 0x46, 0xda, 0xeb, 0x29,
	0x34, 0x7f, 0x9d, 0xe3, 0x1c, 0x57, 0xe5, 0x23, 0xe3, 0x56, 0xf7, 0xcf, 0xd4, 0xa6, 0x79, 0x99,
	0x0c, 0x80, 0x46, 0xbd, 0x9f, 0xe1, 0xd1, 0x96, 0xd4, 0x93, 0x6f, 0xc1, 0x09, 0x31, 0x15, 0xc8,
	0xcb, 0x5b, 0x99, 0x4a, 0xdc, 0x72, 0x1f, 0xbf, 0xa9, 0xd5, 0xe6, 0x36, 0xde, 0xdf, 0x15, 0x78,
	0xcf, 0x52, 0x00, 0xe4, 0x06, 0x1e, 0xde, 0x66, 0x79, 0x2d, 0x8a, 0xbb, 0x8f, 0x6a, 0xaf, 0xa8,
	0xbb, 0x61, 0x1c, 0xc0, 0x91, 0x6a, 0x7a, 0x99, 0x01, 0xa7, 0xfb, 0xe9, 0x1b, 0x56, 0x63, 0x47,
	0x4e, 0x01, 0x5f, 0x39, 0x78, 0x5f, 0xc3, 0x91, 0xfa, 0xfc, 0x03, 0xd4, 0xb4, 0xe8, 0xbc, 0x22,
	0xff, 0x7e, 0x99, 0x4d, 0xa7, 0x31, 0x9e, 0x1f, 0x92, 0x06, 0x9c, 0xf4, 0xe2, 0x58, 0x4a, 0xce,
	0xab, 0xc4, 0x01, 0xe8, 0x45, 0x51, 0xb9, 0x3e, 0xf2, 0x7e, 0xaf, 0xc0, 0x93, 0xdd, 0x55, 0x49,
	0xc6, 0x3b, 0xde, 0x5d, 0xbd, 0x6a, 0x74, 0x1f, 0x6f, 0xde, 0x5d, 0x52, 0x34, 0x9d, 0xc6, 0xb8,
	0xed, 0xed, 0x4f, 0xa1, 0x79, 0xeb, 0x48, 0x23, 0x5d, 0x86, 0x75, 0xff, 0x6c, 0xb5, 0xd9, 0x8b,
	0xa2, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x27, 0xc3, 0x34, 0x21, 0x0b, 0x00, 0x00,
}
